#!/usr/bin/env python3
from sys import argv
from subprocess import call
import re
from math import log10, log2
import pyperclip
from num2words import num2words

pyperclip.set_clipboard('xclip')

# (match, sub, special)
NUM_PATTERN = {
    'dec': (
        re.compile(r'[0-9\,\s]+'),
        re.compile(r'[\,\s]+'),
        re.compile(r'([0-9\,\s]+)([kmgtpezy])', re.I)
    ),
    'hex': (
        re.compile(r'(0x|x|16r|0h)?[0-9a-f\-\s]+', re.I),
        re.compile(r'0x|x|16r|0h|[\-\s]+')
    ),
    'bin': (
        re.compile(r'(0b)?[01\s]+', re.I),
        re.compile(r'[\,\s]+'),
        re.compile(r'([0-9\,\s]+)([kmgtpezy])', re.I)
    ),
}

PREFIXES = [
    ('K', 'kilo',  'Ki', 'kibi'),
    ('M', 'mega',  'Mi', 'mebi'),
    ('G', 'giga',  'Gi', 'gibi'),
    ('T', 'tera',  'Ti', 'tebi'),
    ('P', 'peta',  'Pi', 'pebi'),
    ('E', 'exa',   'Ei', 'exbi'),
    ('Z', 'zetta', 'Zi', 'zebi'),
    ('Y', 'yotta', 'Yi', 'yobi'),
]

def expand_prefix(number, base):
    pattern = NUM_PATTERN[base]
    match = pattern[2].search(number)
    number, prefix = match.groups()
    number = pattern[1].sub('', number)
    prefix = prefix.upper()
    prefix_index = -1
    for i, p in enumerate(PREFIXES):
        if prefix == p[0]:
            prefix_index = i
            break

    return int(number) * (1024 if base == 'bin' else 1000) ** (prefix_index + 1)

def sanitize(number, base):
    pattern = NUM_PATTERN[base]
    match = pattern[0].search(number)
    if not match:
        if not match:
            raise Exception(f'Invalid {base} number: {number}')
    else:
        number = match.group(0)
        return pattern[1].sub('', number)


def get_prefix(number, binary=False):
    if number < (1024 if binary else 1000):
        return None, 1
    if binary:
        prefix_index = min(int(log2(number) / 10), 7)
        prefix_size = 1024 ** prefix_index
        prefix = PREFIXES[prefix_index - 1][2:4]
    else:
        prefix_index = min(int(log10(number) / 3), 7)
        prefix_size = 1000 ** prefix_index
        prefix = PREFIXES[prefix_index - 1][:2]
    return (*prefix, prefix_index * 3), prefix_size

def notify_number_representations(number, base):
    if base is None:
        bases = []
        for base in NUM_PATTERN:
            try:
                sanitize(number, base)
                bases.append(base)
            except:
                pass
        for base in bases:
            notify_number_representations(number, base)
    try:
        number = expand_prefix(number, base)
    except:
        number = sanitize(number, base)
        if base == 'dec':
            number = int(number.replace(',', ''))
        elif base == 'hex':
            number = int(number, base=16)
        elif base == 'bin':
            number = int(number, base=2)

    bit_length = number.bit_length()
    byte_length = (bit_length + 7) // 8

    prefix, prefix_size = get_prefix(number)
    metric = ''
    if prefix:
        metric = f' ({round(number / prefix_size, 2)} {prefix[0]}/{prefix[1]}-/e+{prefix[2]},'

    binary_prefix, binary_prefix_size = get_prefix(number, binary=True)
    binary = ''
    if binary_prefix:
        binary = f' {round(number / binary_prefix_size, 2)} {binary_prefix[0]}/{binary_prefix[1]}-/e+{binary_prefix[2]})'

    call(['notify-send', '-t', '60000', f'{number:,d}', '\n'.join([
        num2words(number),
        f'{number:.2e}{metric}{binary}',
        f'0x{number:0{byte_length * 2}x} ({byte_length} byte{bool(byte_length - 1) * "s"})',
        f'{bin(number)} ({bit_length} bit{bool(bit_length - 1) * "s"})'
    ])])

def main():
    base = argv[1] if len(argv) > 1 else None
    notify_number_representations(pyperclip.paste(primary=True), base)

if __name__ == '__main__':
    main()
