#!/usr/bin/env python3
import socketserver
from os.path import expanduser
from io import StringIO
import pyperclip
import uinput

def unescape_newlines_and_spaces(text):
    result = StringIO()
    text_iter = iter(text)
    for char in text_iter:
        if char != '\\':
            result.write(char)
        else:
            try:
                char = next(text_iter)
            except StopIteration:
                break
            if char == '\\':
                result.write('\\')
            elif char == 'n':
                result.write('\n')
            elif char == 's':
                result.write(' ')
            else:
                result.write('\\' + char)

    return result.getvalue()

def escape_newlines_and_spaces(text):
    result = StringIO()
    for char in text:
        if char == '\\':
            result.write(r'\\')
        elif char == '\n':
            result.write(r'\n')
        elif char == ' ':
            result.write(r'\s')
        else:
            result.write(char)

    return result.getvalue()


class InputServerHandler(socketserver.StreamRequestHandler):

    LINE_MAX_LENGTH = 2 * 1024 ** 2

    def handle(self):
        #print(self.client_address[0])
        if self.rfile.readline(self.LINE_MAX_LENGTH).strip() != self.server.auth:
            #print('invalid auth: {}'.format(auth))
            return
        data = self.rfile.readline()
        while data:
            self.data = data.decode('utf-8').strip().split(' ')
            #print(' '.join(self.data))
            if self.data[0] == 'quit':
                break
            elif self.data[0] == 'mouse':
                self.handle_mouse()
            elif self.data[0] == 'keydown':
                self.server.input.key_press(int(self.data[1]) - 8)
            elif self.data[0] == 'keyup':
                self.server.input.key_release(int(self.data[1]) - 8)
            elif self.data[0] == 'clipboard_copy':
                self.handle_clipboard_copy()
            elif self.data[0] == 'clipboard_paste':
                self.handle_clipboard_paste()
            elif self.data[0] == 'primary_paste':
                self.handle_primary_paste()

            data = self.rfile.readline()

    def handle_mouse(self):
        x, y = map(int, self.data[1].split(','))
        if abs(x) + abs(y) > 0:
            self.server.input.mouse_move_relative(x, y)
        if len(self.data) < 3:
            return
        mouse_buttons = self.data[2].split(',')
        for mouse_button in mouse_buttons:
            if mouse_button == 'left_down':
                self.server.input.button_press(uinput.BTN_LEFT)
            elif mouse_button == 'left_up':
                self.server.input.button_release(uinput.BTN_LEFT)
            elif mouse_button == 'right_down':
                self.server.input.button_press(uinput.BTN_RIGHT)
            elif mouse_button == 'right_up':
                self.server.input.button_release(uinput.BTN_RIGHT)
            elif mouse_button == 'middle_down':
                self.server.input.button_press(uinput.BTN_MIDDLE)
            elif mouse_button == 'middle_up':
                self.server.input.button_release(uinput.BTN_MIDDLE)
            elif mouse_button == 'xbutton1_down':
                self.server.input.button_press(uinput.BTN_SIDE)
            elif mouse_button == 'xbutton1_up':
                self.server.input.button_release(uinput.BTN_SIDE)
            elif mouse_button == 'xbutton2_down':
                self.server.input.button_press(uinput.BTN_EXTRA)
            elif mouse_button == 'xbutton2_up':
                self.server.input.button_release(uinput.BTN_EXTRA)
            elif mouse_button == 'wheel_up':
                self.server.input.mouse_wheel(1)
            elif mouse_button == 'wheel_down':
                self.server.input.mouse_wheel(-1)

    def handle_clipboard_copy(self):
        if len(self.data) < 2:
            return
        text = unescape_newlines_and_spaces(self.data[1])
        pyperclip.copy(text)
        pyperclip.copy(text, primary=True)

    def handle_clipboard_paste(self):
        text = escape_newlines_and_spaces(pyperclip.paste())
        self.wfile.write('clipboard_paste {}\n'.format(text).encode('utf-8'))

    def handle_primary_paste(self):
        text = escape_newlines_and_spaces(pyperclip.paste(primary=True))
        self.wfile.write('primary_paste {}\n'.format(text).encode('utf-8'))


class InputServer(socketserver.ThreadingMixIn, socketserver.TCPServer):

    allow_reuse_address = True

    def __init__(self, *args, **kwargs):
        self.input = kwargs.pop('input')
        self.auth = kwargs.pop('auth')
        super(InputServer, self).__init__(*args, **kwargs)


class Input(object):

    def __init__(self):
        self.input = uinput.Device(self._events())

    def _events(self):
        events = [
            uinput.REL_X,
            uinput.REL_Y,
            uinput.REL_WHEEL,
            uinput.BTN_LEFT,
            uinput.BTN_MIDDLE,
            uinput.BTN_RIGHT,
            uinput.BTN_SIDE,
            uinput.BTN_EXTRA,
            ]

        for i in range(1, 127):
            events.append((0x01, i))

        return events

    def key_press(self, code):
        self.input.emit((0x01, code), 1)

    def key_release(self, code):
        self.input.emit((0x01, code), 0)

    def mouse_move_relative(self, x, y):
        self.input.emit(uinput.REL_X, x, syn=False)
        self.input.emit(uinput.REL_Y, y)

    def button_press(self, code):
        self.input.emit(code, 1)

    def button_release(self, code):
        self.input.emit(code, 0)

    def mouse_wheel(self, delta):
        self.input.emit(uinput.REL_WHEEL, delta)


def main():
    linux_input = Input()
    with open(expanduser('~/.windows-hotkey-server'), 'rb') as f:
        auth = f.read().strip()
    input_server = InputServer(('127.0.0.1', 9888), InputServerHandler, input=linux_input, auth=auth)
    input_server.serve_forever()

if __name__ == '__main__':
    main()
